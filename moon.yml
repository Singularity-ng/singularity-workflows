# https://moonrepo.dev/schemas/project.json
$schema: '../../.moon/cache/schemas/project.json'

type: 'library'
language: 'elixir'
project:
  name: '@singularity/ex_pgflow'
  description: 'Elixir implementation of pgflow - PostgreSQL-native workflow orchestration'
  channel: '#external'
  owner: 'singularity'
  maintainers: ['mikkihugo']

tasks:
  # Core Elixir tasks
  deps:
    command: 'nix develop ../../#dev --command mix deps.get'
    inputs:
      - 'mix.exs'
      - 'mix.lock'
    outputs:
      - 'deps/'

  compile:
    command: 'nix develop ../../#dev --command mix compile'
    deps:
      - 'deps'
    inputs:
      - 'lib/**/*.{ex,exs}'
      - 'config/**/*.{ex,exs}'
    outputs:
      - '_build/'

  test:
    command: 'nix develop ../../#dev --command bash -lc "PGFLOW_SKIP_DB=1 mix test"'
    deps:
      - 'compile'
    inputs:
      - 'test/**/*.{ex,exs}'
      - 'lib/**/*.{ex,exs}'
    options:
      runInCI: true

  # Quality tasks
  format:
    command: 'nix develop ../../#dev --command mix format'
    inputs:
      - 'lib/**/*.{ex,exs}'
      - 'test/**/*.{ex,exs}'
      - 'config/**/*.{ex,exs}'

  credo:
    command: 'nix develop ../../#dev --command mix credo --strict'
    deps:
      - 'compile'
    options:
      runInCI: true

  dialyzer:
    command: 'nix develop ../../#dev --command mix dialyzer'
    deps:
      - 'compile'
    options:
      runInCI: true

  # Documentation
  docs:
    command: 'nix develop ../../#dev --command mix docs'
    deps:
      - 'compile'
    outputs:
      - 'doc/'

  # Database tasks (for testing)
  db_setup:
    command: 'nix develop ../../#dev --command bash -lc "mix ecto.create && mix ecto.migrate"'
    local: true

  db_test:
    command: 'nix develop ../../#dev --command bash -lc "MIX_ENV=test mix ecto.create && MIX_ENV=test mix ecto.migrate"'
    local: true

  # Release tasks
  hex_publish:
    command: 'nix develop ../../#dev --command mix hex.publish'
    local: true
    options:
      interactive: true

# This project can be published independently to Hex.pm
# and used by external Elixir applications
