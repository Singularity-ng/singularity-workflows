name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]  # Also run CI on version tags
  pull_request:
    branches: [ main ]

jobs:
  # Build custom Docker image if needed
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}

    steps:
    - uses: actions/checkout@v4

    - name: Check if custom image should be built
      id: check
      run: |
        # Build if Dockerfile changed or doesn't exist in registry
        if git diff --name-only HEAD~1..HEAD | grep -q ".github/docker/Dockerfile.postgres"; then
          echo "build=true" >> $GITHUB_OUTPUT
        else
          echo "build=false" >> $GITHUB_OUTPUT
        fi

    - name: Log in to GitHub Container Registry
      if: steps.check.outputs.build == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push if needed
      if: steps.check.outputs.build == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .github/docker/Dockerfile.postgres
        push: true
        tags: ghcr.io/mikkihugo/ex_pgflow-postgres:pg18-pgmq

    - name: Set image output
      id: image
      run: |
        # Try to use custom image, fallback to official
        if docker manifest inspect ghcr.io/mikkihugo/ex_pgflow-postgres:pg18-pgmq >/dev/null 2>&1; then
          echo "image=ghcr.io/mikkihugo/ex_pgflow-postgres:pg18-pgmq" >> $GITHUB_OUTPUT
        else
          echo "image=ghcr.io/pgmq/pg18-pgmq:latest" >> $GITHUB_OUTPUT
        fi

  test:
    needs: build-image
    runs-on: ubuntu-latest

    services:
      postgres:
        # Use custom image if available, otherwise official pgmq image
        image: ${{ needs.build-image.outputs.image || 'ghcr.io/pgmq/pg18-pgmq:latest' }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.19'
        otp-version: '28'

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Create test database with pgmq
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE ex_pgflow_test;"
        # pgmq should already be available in the ghcr.io/tembo-io/pgmq-pg image
        PGPASSWORD=postgres psql -h localhost -U postgres -d ex_pgflow_test -c "CREATE EXTENSION IF NOT EXISTS pgmq;"

    - name: Run migrations
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/ex_pgflow_test"
        mix ecto.migrate
      env:
        MIX_ENV: test

    - name: Run tests
      run: |
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/ex_pgflow_test"
        mix test
      env:
        MIX_ENV: test

    - name: Check formatting
      run: mix format --check-formatted

    - name: Run credo
      run: mix credo --strict

    - name: Run sobelow
      run: mix sobelow --exit-on-warning

    - name: Check dependencies
      run: mix deps.audit

    - name: Run dialyzer
      run: mix dialyzer

    - name: Build documentation
      run: mix docs

    # Release checklist - only on version tags
    - name: Check CHANGELOG updated (on release tags)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
        if grep -q "## \[$VERSION\]" CHANGELOG.md; then
          echo "✓ CHANGELOG.md is updated for v$VERSION"
        else
          echo "✗ CHANGELOG.md is NOT updated for v$VERSION"
          exit 1
        fi

    - name: Verify version matches (on release tags)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
        MIX_VERSION=$(grep 'version:' mix.exs | head -1 | sed 's/.*version: "\(.*\)".*/\1/')
        if [ "$TAG_VERSION" = "$MIX_VERSION" ]; then
          echo "✓ mix.exs version matches tag ($MIX_VERSION)"
        else
          echo "✗ Version mismatch: tag=$TAG_VERSION, mix.exs=$MIX_VERSION"
          exit 1
        fi
