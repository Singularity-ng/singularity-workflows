name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    services:
      postgres:
        # Use official pgmq image with PostgreSQL 17 and pgmq pre-installed
        # pgmq is REQUIRED for task coordination and queue management
        image: ghcr.io/pgmq/pg17-pgmq:v1.7.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.19'
          otp-version: '28'

      - name: Restore Elixir dependencies cache
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install Elixir dependencies
        run: mix deps.get

      - name: Wait for PostgreSQL and create test database
        run: |
          # Wait for PostgreSQL to be ready
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do echo "Waiting for postgres..."; sleep 1; done'
          sleep 1

          # Create test database idempotently
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE IF NOT EXISTS singularity_workflow_test;"

      - name: Run migrations
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/singularity_workflow_test"
          mix ecto.migrate
        env:
          MIX_ENV: test
