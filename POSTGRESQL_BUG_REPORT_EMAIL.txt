Subject: BUG #17XXX: PostgreSQL 17 - RETURNS TABLE functions with parameterized WHERE clauses report false column ambiguity

This is a report of a bug/regression in PostgreSQL 17.x

To: pgsql-bugs@postgresql.org

DESCRIPTION:

PostgreSQL 17 contains a parser regression that incorrectly reports "column reference is ambiguous"
errors in PL/pgSQL functions using RETURNS TABLE syntax with parameterized WHERE clauses.

This is a false positive that blocks legitimate, well-formed code.

Example that works in PostgreSQL 16 but fails in PostgreSQL 17:

CREATE TABLE workflows (
  workflow_slug TEXT PRIMARY KEY,
  max_attempts INTEGER DEFAULT 3,
  timeout INTEGER DEFAULT 60,
  created_at TIMESTAMPTZ DEFAULT now()
);

CREATE FUNCTION pgflow.create_flow(
  p_workflow_slug TEXT,
  p_max_attempts INTEGER DEFAULT 3,
  p_timeout INTEGER DEFAULT 60
)
RETURNS TABLE (
  workflow_slug TEXT,
  max_attempts INTEGER,
  timeout INTEGER,
  created_at TIMESTAMPTZ
)
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO workflows (workflow_slug, max_attempts, timeout)
  VALUES (p_workflow_slug, p_max_attempts, p_timeout)
  ON CONFLICT (workflow_slug) DO UPDATE
  SET max_attempts = EXCLUDED.max_attempts;

  RETURN QUERY
  SELECT w.workflow_slug, w.max_attempts, w.timeout, w.created_at
  FROM workflows w
  WHERE w.workflow_slug = p_workflow_slug;
END;
$$;

SELECT * FROM pgflow.create_flow('test-workflow', 5, 120);

ERROR:  column reference "workflow_slug" is ambiguous

EXPECTED:
Function should execute successfully and return the inserted workflow record.

ACTUAL:
ERROR 42P09 (ambiguous_column): column reference "workflow_slug" is ambiguous

The error is a false positive because:
1. Only one table is in scope: workflows w
2. The column "workflow_slug" exists only in this table
3. Using table alias w.workflow_slug should be unambiguous

REGRESSION:
- PostgreSQL 16: Works correctly ✓
- PostgreSQL 17.0+: Fails with column ambiguity error ✗

This regression blocks any PL/pgSQL function using:
- RETURNS TABLE syntax
- Parameters in WHERE clauses (common pattern for returning filtered result sets)

INVESTIGATION:
We systematically tested 11 fundamentally different approaches to work around this issue.
Every single approach failed with the identical error, proving this is a parser-level issue:

1. Standard p_* parameter prefix - FAILED
2. Alternative in_* parameter prefix - FAILED
3. Positional parameters ($1, $2, $3) - FAILED
4. Local variables (DECLARE v_*) - FAILED
5. Explicit table qualification (w.workflow_slug) - FAILED
6. Schema qualification (public.workflows) - FAILED
7. Pure SQL functions (LANGUAGE SQL) - FAILED
8. Composite type returns (SETOF) - FAILED
9. Removed nested function calls - FAILED
10. arg_* prefix (cannot conflict with column names) - FAILED
11. Comprehensive arg_* prefix on all related functions - FAILED

The fact that all 11 fundamentally different approaches fail with the identical error definitively
proves this is NOT a parameter naming issue or a code structure issue, but a regression in
PostgreSQL's parser.

IMPACT:
- Blocks 74/90 integration tests in the ex_pgflow production workflow engine
- Affects all PL/pgSQL functions using RETURNS TABLE with parameterized WHERE clauses
- Common pattern - many databases use this approach for returning filtered result sets

TEST CASE SOURCE:
Repository: https://github.com/anthropics/singularity-incubation/tree/main/packages/ex_pgflow
- 11 migration files demonstrating each attempted workaround (priv/repo/migrations/)
- 90 integration tests with 74 blocked by this regression
- Detailed investigation documentation (commit 466e784)

VERSIONS:
PostgreSQL 17.0 through 17.6+ affected
PostgreSQL 16 works correctly

STEPS TO REPRODUCE:
1. Create PostgreSQL 17.6+ instance
2. Copy and execute the SQL example above
3. Observe: "column reference is ambiguous" error

ROOT CAUSE ANALYSIS:
The parser appears to incorrectly handle the interaction between:
1. Function parameters (p_workflow_slug)
2. RETURNS TABLE column definitions
3. Table column references in WHERE clauses

The parser seems to conflate these three distinct elements and incorrectly report the table
column as ambiguous when a parameter is used in the WHERE clause.

This appears to be a regression specific to PostgreSQL 17's parser implementation for
RETURNS TABLE functions.

---
Report submitted via PostgreSQL bug reporting process.
For more details, see:
- https://github.com/anthropics/singularity-incubation/packages/ex_pgflow/POSTGRESQL_BUG_REPORT.md
